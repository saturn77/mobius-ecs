// Generated by Mobius Designer
// This code provides a starting point for your egui application

use eframe::egui;

#[derive(Default)]
pub struct App {
    input_1: String,
    default_group_selection: String,
    checkbox_1: bool,
    checkbox_2: bool,
}

impl App {
    pub fn new(_cc: &eframe::CreationContext<'_>) -> Self {
        Default::default()
    }
}

impl eframe::App for App {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        // Top menu bar
        egui::TopBottomPanel::top("top_panel").show(ctx, |ui| {
            egui::menu::bar(ui, |ui| {
                ui.menu_button("File", |ui| {
                    if ui.button("New").clicked() {
                        // TODO: Implement new file
                    }
                    if ui.button("Open").clicked() {
                        // TODO: Implement open file
                    }
                    if ui.button("Save").clicked() {
                        // TODO: Implement save file
                    }
                });
            });
        });
        
        // Main content area with generated UI
        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("My Generated App");
            ui.separator();
            
            // Call the generated panel function
            show_main_panel(ui, self);
        });
    }
}

use egui;

pub fn show_main_panel(ui: &mut egui::Ui, app: &mut App) {
    ui.heading("Main");
    ui.separator();
    
    // Elements positioned exactly as in the designer
    egui::Area::new(egui::Id::new("element_Entity { index: 5, generation: 1 }"))
        .fixed_pos(egui::pos2(47.4, 138.6))
        .show(ui.ctx(), |ui| {
            if ui.add_sized(
                egui::vec2(75.0, 25.0),
                egui::Button::new("Button 1")
            ).clicked() {
                // TODO: Handle Button 1 button click
            }
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 6, generation: 1 }"))
        .fixed_pos(egui::pos2(47.4, 173.6))
        .show(ui.ctx(), |ui| {
            if ui.add_sized(
                egui::vec2(75.0, 25.0),
                egui::Button::new("Button 2")
            ).clicked() {
                // TODO: Handle Button 2 button click
            }
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 7, generation: 1 }"))
        .fixed_pos(egui::pos2(47.4, 208.6))
        .show(ui.ctx(), |ui| {
            if ui.add_sized(
                egui::vec2(75.0, 25.0),
                egui::Button::new("Button X")
            ).clicked() {
                // TODO: Handle Button X button click
            }
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 8, generation: 1 }"))
        .fixed_pos(egui::pos2(47.7, 250.3))
        .show(ui.ctx(), |ui| {
            ui.vertical(|ui| {
                ui.label("Input 1");
                ui.add_sized(
                    egui::vec2(200.0, 30.0),
                    egui::TextEdit::singleline(&mut app.input_1)
                );
            });
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 9, generation: 1 }"))
        .fixed_pos(egui::pos2(54.4, 314.5))
        .show(ui.ctx(), |ui| {
            ui.radio_value(&mut app.default_group_selection, "Radio 1", "Radio 1");
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 10, generation: 1 }"))
        .fixed_pos(egui::pos2(154.4, 316.9))
        .show(ui.ctx(), |ui| {
            ui.radio_value(&mut app.default_group_selection, "Radio 2", "Radio 2");
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 11, generation: 1 }"))
        .fixed_pos(egui::pos2(54.4, 356.9))
        .show(ui.ctx(), |ui| {
            ui.checkbox(&mut app.checkbox_1, "Checkbox 1");
        });
    
    egui::Area::new(egui::Id::new("element_Entity { index: 12, generation: 1 }"))
        .fixed_pos(egui::pos2(53.6, 388.2))
        .show(ui.ctx(), |ui| {
            ui.checkbox(&mut app.checkbox_2, "Checkbox 2");
        });
    
}

fn main() -> Result<(), eframe::Error> {
    let options = eframe::NativeOptions {
        viewport: egui::ViewportBuilder::default().with_inner_size([800.0, 600.0]),
        ..Default::default()
    };
    
    eframe::run_native(
        "My egui App",
        options,
        Box::new(|cc| Box::new(App::new(cc))),
    )
}
